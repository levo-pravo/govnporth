#!/usr/bin/python3
from sys import argv;

# assert
def ass(cond: bool, msg: str = "assertion failed"):
  if (not cond):
    print(f"{argv[0]}: fatal error: {msg}");
    exit(1);

iota_counter = 0;
def iota(reset=False):
  global iota_counter;
  if (reset):
    iota_counter = 0;
  result = iota_counter;
  iota_counter += 1;
  return result;

ISSPACE   = " \0\n\t";
LETTERS   = "abcdefghijklmnopqrstuvwxyz";
DIGITS    = "0123456789";

OP_PUSH   = iota(1);
OP_PLUS   = iota();
OP_MINUS  = iota();
OP_MULT   = iota();
OP_DUMP   = iota();
OP_IF     = iota();
OP_WHILE  = iota();
OP_END    = iota();
OP_WEND   = iota();
OP_STR    = iota();
OP_DUP    = iota();
OP_ID     = iota();
COUNT_OPS = iota();

push  = lambda x: (OP_PUSH, x);
plus  = lambda:   (OP_PLUS,);
minus = lambda:   (OP_MINUS,);
mult  = lambda:   (OP_MULT,);
dump  = lambda:   (OP_DUMP,);
iff   = lambda:   (OP_IF,);
end   = lambda:   (OP_END,);
whil  = lambda:   (OP_WHILE,);
wend  = lambda:   (OP_WEND,);
pushs = lambda x: (OP_STR, x);
dup   = lambda:   (OP_DUP,);
id    = lambda x: (OP_ID, x);
def kw(w: str):
  match (w):
    case "if":
      return iff();
    case "end":
      return end();
    case "while":
      return whil();
    case "wend":
      return wend();
    case "dup":
      return dup();
    case _:
      return id(w);

def lex_file(filename):
  try:
    with open(filename, "r") as fl:
      src = fl.read();
  except:
    ass(0, "file `%s` not found" % filename);
  srcl:   int = len(src);
  pos:    int = 0;
  row:    int = 1;
  column: int = 1;
  ir:     list = [];
  buf:    str = "";
  while (pos < srcl):
    if (src[pos] == "+"):
      ir.append(plus());
      pos += 1;
    elif (src[pos] == "-"):
      ir.append(minus());
      pos += 1;
    elif (src[pos] == "*"):
      ir.append(mult());
      pos += 1;
    elif (src[pos] == "."):
      ir.append(dump());
      pos += 1;
    elif (src[pos] == "\""):
      pos += 1;
      while (src[pos] != "\""):
        if ((src[pos] == "\\") and (src[pos+1] == "n")):
          pos += 2;
          buf += "\n";
        else:
          buf += src[pos];
          pos += 1;
      ir.append(pushs(buf));
      pos += 1;
      buf = "";
    elif (src[pos] in DIGITS):
      while (src[pos] in DIGITS):
        buf += src[pos];
        pos += 1;
      ir.append(push(int(buf)));
      buf = "";
    elif (src[pos] in LETTERS):
      while (src[pos] in LETTERS):
        buf += src[pos];
        pos += 1;
      ir.append(kw(buf));
      buf = "";
    elif (src[pos] in ISSPACE):
      pos += 1;
    else:
      print("kasm: error: unknown character `%c`" % src[pos]);
      exit(1);
  return ir;

def asbytes(s: str) -> str:
  res = "";
  for i in s:
    res += " $"+hex(ord(i))[2:].upper();
  return res;

def resolve_end(program):
  if_stack: list = [];
  pos: int = 0;
  pl:  int = len(program);
  while (pos < pl):
    if (program[pos][0] == OP_IF):
      if_stack.append(pos);
    if (program[pos][0] == OP_WHILE):
      if_stack.append(pos);
    elif (program[pos][0] == OP_END):
      addr: int = if_stack.pop();
      ass(program[addr][0] == OP_IF, "`end` can't close while loops");
      program[addr] = list(program[addr]);
      program[addr].append(pos);
      program[addr] = tuple(program[addr]);
    elif (program[pos][0] == OP_WEND):
      addr: int = if_stack.pop();
      ass(program[addr][0] == OP_WHILE, "`wend` can't close if statements");
      program[addr] = list(program[addr]);
      program[addr].append(pos);
      program[addr] = tuple(program[addr]);

      program[pos] = list(program[pos]);
      program[pos].append(addr);
      program[pos] = tuple(program[pos]);
    pos += 1;
  return program;

def compile_program(program, out_fp):
  ass(COUNT_OPS == 12, "exhaustive handling of operations in compilation mode");
  pos:   int  = 0;
  pl:    int  = len(program);
  strs:  list = [];
  procs: list = ["puts"];
  with open(out_fp, "w") as out:
    out.write("jmp _porth_start\n");
    out.write("write:\n");
    out.write("  dex %cx\n");
    out.write(".loop:\n");
    out.write("  lodb %si %ax\n");
    out.write("  push %ax\n");
    out.write("  int $02\n");
    out.write("  loop .loop\n");
    out.write("  ret\n");
    out.write("puti:\n");
    out.write("  mov %gi puti_buf\n");
    out.write("  add %gi 7\n");
    out.write(".loop:\n");
    out.write("  div %ax 10\n");
    out.write("  add %dx 48\n");
    out.write("  stob %gi %dx\n");
    out.write("  sub %gi 2\n");
    out.write("  cmp %ax $00\n");
    out.write("  jne .loop\n");
    out.write("  mov %si puti_buf\n");
    out.write("  mov %cx 8\n");
    out.write("  call write\n");
    out.write("  push $0A\n");
    out.write("  int 2\n");
    out.write("  call puti_clr\n");
    out.write("  ret\n");
    out.write("puti_clr:\n");
    out.write("  mov %si puti_buf\n");
    out.write("  mov %ax $00\n");
    out.write("  mov %cx 8\n");
    out.write(".loop:\n");
    out.write("  stob %si %ax\n");
    out.write("  loop .loop\n");
    out.write("  ret\n");
    out.write("puti_buf: reserve 8 bytes\n");
    out.write("puts:\n");
    out.write("  pop %ax\n");
    out.write("  pop %si\n");
    out.write("  push %ax\n");
    out.write(".loop:\n");
    out.write("  lodb %si %ax\n");
    out.write("  cmp %ax $00 \n");
    out.write("  re\n");
    out.write("  push %ax\n");
    out.write("  int 2\n");
    out.write("  jmp .loop\n");
    out.write("_porth_start:\n");
    while (pos < pl):
      op = program[pos];
      if (op[0] == OP_PUSH):
        out.write("  ; push %d\n" % op[1]);
        out.write("  push %d\n" % op[1]);
      elif (op[0] == OP_PLUS):
        out.write("  ; plus\n");
        out.write("  pop %ax\n");
        out.write("  pop %bx\n");
        out.write("  add %ax %bx\n");
        out.write("  push %ax\n");
      elif (op[0] == OP_MINUS):
        out.write("  ; minus\n");
        out.write("  pop %ax\n");
        out.write("  pop %bx\n");
        out.write("  sub %bx %ax\n");
        out.write("  push %bx\n");
      elif (op[0] == OP_MULT):
        out.write("  ; minus\n");
        out.write("  pop %ax\n");
        out.write("  pop %bx\n");
        out.write("  mul %ax %bx\n");
        out.write("  push %ax\n");
      elif (op[0] == OP_DUMP):
        out.write("  ; dump\n");
        out.write("  pop %ax\n");
        out.write("  call puti\n");
      elif (op[0] == OP_DUP):
        out.write("  ; dup\n");
        out.write("  pop %ax\n");
        out.write("  push %ax\n");
        out.write("  push %ax\n");
      elif (op[0] == OP_IF):
        out.write("  pop %ax\n");
        out.write("  cmp %ax $00\n");
        out.write("  jne if_%d\n" % pos);
        out.write("  jmp end_%d\n" % op[1]);
        out.write("if_%d:\n" % pos);
      elif (op[0] == OP_WHILE):
        out.write("  pop %ax\n");
        out.write("  cmp %ax $00\n");
        out.write("  jne while_%d\n" % pos);
        out.write("  jmp wend_%d\n" % op[1]);
        out.write("while_%d:\n" % pos);
      elif (op[0] == OP_END):
        out.write("end_%d:\n" % pos);
      elif (op[0] == OP_WEND):
        out.write("wend_%d:\n" % pos);
        out.write("  pop %ax\n");
        out.write("  push %ax\n");
        out.write("  push %ax\n");
        out.write("  cmp %ax $00\n");
        out.write("  jne while_%d\n" % op[1]);
      elif (op[0] == OP_STR):
        out.write("  push str_%04X\n" % len(strs));
        strs.append("str_%04X: bytes%s\n" % (len(strs), asbytes(op[1]+"\0")));
      elif (op[0] == OP_ID):
        if (op[1] in procs): out.write("  call %s\n" % op[1]);
        else:
          out.write("mov %%si %s\n" % op[1]);
          out.write("push %si\n");
      else:
        ass(0, "unreachable");
      pos += 1;
    out.write("  hlt\n");
    out.write("\n".join(strs));

def main(argc: int, argv: list):
  if (argc < 3):
    print("Usage: govnporth <FILE> <OUTPUT>");
    return 1;
  infile = argv[1];
  outfile = argv[2];
  program = lex_file(infile);
  program = resolve_end(program);
  print(program);
  compile_program(program, outfile);

  return 0;

exit(main(len(argv), argv));
